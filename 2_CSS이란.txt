CSS 이란?
 C(Cascading) S(Style) S(sheets)
- 위 -> 아래 로 꾸미기 시트를 덮는다.
- 주로 HTML 언어를 꾸미는 목적으로 사용
- CSS는 독립적으로 실행 불가 (HTML 종속형 스타일 언어) 

CSS 주석 : /*  */

CSS 적용방법
1. HTML 마크업에 Style 속성 사용
    < 마크업 style=" 속성 명 :  속성 값 ;" >


[CSS 적용방법]
1. 적용할 마크업에 style 속성 사용 
 --> 식별자 X
< 마크업 style="속성" >
★ 코드 복잡해짐 

2. <head> 안에 <style> 마크업 작성 후 안에 CSS 작성 
 --> 식별자가 있어함
<head>
<style>
식별자 { 속성명 : 속성값}
</style>
</head>
★ 재사용 불가

3. <head> 마크업 안에 <link> 마크업을 이용해 CSS 파일 선언
 --> CSS 파일 만들기 -> 확장자 .css로 저장 -> 적용할 html 파일 내 css 파일 포함
<head>
<link href ="호출할 css 파일" rel="stylesheet"/>
href 호출 시 경로 주의
</head>
★ 되도록 3번 방법 사용


[CSS 선택자]
1. 전체 선택자 --> *{속성 : 값 ;}
- 속성이 여러 개 일 경우 한 중괄호 안에 세미콜론으로 구분해서 작성
★ 공통 작업, 베이스 작업 시 주로 사용

2. 특정 마크업 선택자 --> 해당마크업{ 속성 : 값 ; }

3. class 선택자(복수) --> .클래스명{ 속성 : 값 ; }
- 여러 마크업들이 동일한 클래스 명을 가짐

4. id 선택자(단일) --> #아이디명{ 속성 : 값 ; }
- 여러 마크업들이 서로 다른(단일) 아이디를 가짐
★ 전체 레이어(규격) 잡을 때 주로 사용

5. 복수 선택자(쉼표로 선택자 구별) --> 마크업1, 마크업1{ 속성 : 값 ;}
                                 --> 마크업, id{ 속성 : 값 ;} 등으로 복수 선택하여 사용가능

- class, id는 개발자가 임의로 식별자 부여 --> < 마크업 class="식별자" > / < 마크업 id="식별자" >
- 선택자 적용 우선 순위(속성이 중복일 경우만 해당) : id(#) > class(.) > 마크업 > 전체(*)
★ class의 경우 동일 선택자 사용 시 코드 작성 순서대로 더 아래 있는 코드가 최종 적용
★ id의 경우 선택자 다중 사용 불가 (무조건 단일로만 사용 가능)

6. 자식 선택자 --> 부모노드 > 자식노드 
★ 자식보다 하위노드 선택 시 코드가 복잡해지기 때문에 class, id, 자손 선택자를 이용해준다

7. 자손 선택자 --> 부모노드 모든하위노드 (space bar)


[CSS 속성]
1. color 속성 : 색상 지정
--> 색상명으로 지정 :  대상 { color : 색상명 ; }
--> RGB로 지정(0~255) : 대상 { color : RGB숫자; }
--> 헥사코드 지정(16진수) : 대상{ color : 헥사코드;}
★ 헥사코드(ex . #FF8733)를 주로 사용
   background-color : 배경색상 지정

2. font-family 속성 : 여러 개 선언 시 먼저 선언한 폰트가 없을 경우 하위 선언 폰트 적용
--> 대상 { font-family : 폰트명; }
- 글꼴 : 사용자 PC에 설치된 글꼴만 가능
- 웹(눈누/구글 등) 폰트 : 폰트를 제공하는 서버로부터 글꼴 사용
★ 웹 폰트 사용시 해당 폰트의 코드를 css파일에 선언 한 후 font-family로 지정 가능

3. font-size 속성(px를 통해 사이즈 지정) : 문자 크기 변경
--> 대상 { front-size : px; }

4. font-style 속성 : 문자 기능
--> 대상 { font-style : 속성값;}
- italic : 텍스트 기울기 지정

5. weight 속성(bold 등으로 지정) : 텍스트 굵기
--> 대상 { weight : 속성값; }

6. word-spacing 속성(px를 통해 공백 지정) : 어간 공백 지정
--> 대상 { word-spacing : px; }
7. letter-spacing 속성(px를 통해 공백 지정) : 자간 공백 지정
--> 대상 { letter-spacing : px; }

8. line-height(%를 통해 공백 지정) : 줄 간격
--> 대상 {line-height : % ; }
★ 일반적으로 150% ~ 180% 사이즈 사용

9. text-align 속성 : 해당 노드 안에 문자, 컨텐츠 등 위치 정렬
--> 대상 { text-align : 속성값 ; }
- center : 중앙 정렬
- left : 왼쪽 정렬
- right : 오른쪽 정렬
★ 가로 정렬만 가능

10. text-decoration 속성 : 문자에 선 지정
--> 대상 { text-decoration : 속성값 ; }
- underline : 밑줄
- overline : 윗줄
- line-through : 취소선

11. text-shadow 속성 : 텍스트 그림자 (x축, y축, 흐림 정도)
--> 대상 { text-shadow : x축px y축px 흐림정도px; color : 색깔;(color 속성 생략 가능) }
★ 원점 : 0px
★★ text-align 속성으로 컨텐츠 위치를 변경할 경우 대상은 해당 컨텐츠는 구역 내에 있는 
모든 컨텐츠(문자, 이미지, 오디오, 입력상자 등)를 의미하기 때문에 해당 컨텐츠의
부모 노드에 해당되는 마크업을 text-align 속성 으로 위치를 이동시켜야 함 

12: border 속성 : 테두리 속성
--> 대상{ border : 선종류 선굵기(px를 통해 굵기 지정) 선색상 ; }
    border-top : 상단 테두리
    borde-right : 오른쪽 테두리
    border-left : 왼쪽 테두리
    border-bottom : 하단 테두리
    border-radius : 둥근 모서리 (px는 둥근 정도를 나타냄)
- solid : 선
- dotted : 점선
- dashed : 실선
- double : 이중선

13. width 속성 : 가로 사이즈 지정 
    height 속성: 세로 사이즈 
--> 대상 { width/height : px ; }
★ 생략 시 기본값이 100%(상위 마크업 사이즈 기준)로 지정됨 --> 가운데 정렬 불가능

14. padding 속성 : 안쪽 여백(테두리와 컨텐츠 상하좌우 사이 여백) 지정
15. margin 속성 : 바깥 여백(테두리와 다음 구역 사이 여백) 지정됨
--> 대상 { padding/ margin : px ; }
- top/ bottom/ right/ left 속성과 같이 사용 가능 
간소화 1 . padding속성 하나에 값 4개 선언: 시계방향(위 > 오른쪽 > 왼쪽 > 아래) 순서로 적용
간소화 2 . padding속성 하나에 값 2개 선언: 앞에 값은 위/아래 뒤에 값은 오른쪽/왼쪽에 적용됨
간소화 3 . padding속성 하나에 값 1개 선언: 모든 방향에 적용됨
★ margin: 0 auto; 
--> 해당 구역 내에서 가운데 정렬
--> 사이즈 설정을 안 할 시 사이즈가 기본 값인 100%로 지정되기 사이즈를 임의로 지정해야만 사용가능
- 0: 위/아래 가운데 정렬
- auto : 오른쪽/왼쪽 가운데 정렬

16. position 속성 : 드롭다운, 위치 고정(box와 box를 겹치게 설정할 때) 등에 사용
    relative : 상대위치(본래 지정된 구역의 위치 -> 지정 위치 로 이동)
        - top, left 통해 설정 px만큼 이동(+,- 둘 다 사용 가능)
    absolute : 절대위치 (가장 가까이 있는 부모 노드의 구역 -> 지정 위치로 이동)
        - top, left 통해 설정 px만큼 이동(+,- 둘 다 사용 가능)
        - 드롭 다운, 사이드 바에 주로 사용
        - relative를 가진 부모를 기준으로 이동 
            (boby는 기본 값이 relative이기 때문에 부모 노드에 설정하지 않았을 시
             body 기준으로 위치를 이동)
    static(기본값) : 고정위치 
        - top, left, right, bottom 등 위치를 이동시키는 속성 사용 불가
        - 기본값이기 때문에 생략 가능
    fixed : 결정된 위치에 고정(디바이스 기준 고정)
        - top, left 통해 설정 px만큼 이동(+,- 둘 다 사용 가능)
        - 디바이스 기준이기 때문에 스크롤 바를 움직여도 지정 위치에 고정
    sticky :


★ 모든 마크업은 기본적인 CSS 포함 (글자크기, 굵기, 여백 등의 CSS 기본값)
--> 구역/박스(레이아웃)를 구성할 때 사용되는 마크업은 기본값 X ex . <div> </div> , <span> </span> 등

★ <img> , <p> , <h> , <li> , <ol> : block(한줄 차지 -> 줄 바뀜 O)
★ <div> , <span> , <a> : inline(한줄 포함 -> 해당 마크업에 클래스를 부여해 CSS를 적용할 때 줄 바뀜 X)
 --> 특정 부분에 포인트를 줄 때 사용






[ display 속성 ] ★ display : 마크업이 배치되는 방법 , CSS로 수정 가능
<종류>
1. block --> 해당 마크업이 한 줄을 차지하는 배치
    - 대표 마크업 : <div> , <h> , <p> , <ul> , <li>
    - weight, height, margin, padding 적용 가능

2.inline : 해당 마크업이 한 줄에 포함되는 마크업 (img기본값)
    - 가로로 여러 구역 나누기 가능
    - width, height 속성은 적용 불가
    - margin, padding 속성은 좌 우만 적용 가능
--> 한줄 포함으로 구역사이즈를 지정하고 싶을 시 inline 마크업으로 선언 후
    CSS에서 display :  block으로 지정

3.inline-block : 해당 마크업이 한 줄에 포함되는 마크업 
    - 대표 마크업 : <input/> , <button>
    - weight, height, margin, padding 적용 가능


4. none : 해당 마크업 숨기기


[flex 속성]
현재 지정된 선택자의 자손 노드를 가로배치하는 방법

flex-wrap : nowrap ; --> 자손 노드의 사이즈가 
부모 노드보다 크면 크기를 부모 노드 크기로 자동 조정

flex-wrap : wrap; --> 자손 노드의 사이즈가 부모 노드보다
크면 부모 노드를 자손 노드 크기로 자동 조정

flex-wrap : flex-reverse ; --> 순서 뒤집기

flex-direction : row 등의 속성 ; --> 자손 노드의 배치방법을 지정
    - row : 가로 배치(기본값, 생략 가능)
    - colum : 세로 배치

--> 위치를 배치하고 싶은 노드의 바로 윗 부모 노드에 적용해야함

justify-content : flex 자손 노드의 가로 정렬
    - flex-start : 왼쪽 정렬 (기본값)
    - flex-end : 오른쪽 정렬
    - center : 가운데 정렬
    - space-between : 동일한 규격의 여백이 생기도록 정렬(앞, 뒤 여백 X)
    - space-around : 동일한 규격의 여백이 생기도록 정렬(앞, 뒤 여백O)
    - space-exenly
alingn-items : flex 자손 노드의 세로 정렬
    - stretch : 자식 노드들이 고정크기가 아니라면(height를 지정하지 않았다면) 
                자동으로 부모노드의 높이로 늘림(기본값)
    - center : 자식 노드 각각 가지고 있는 높이 기준으로 부모 노드의 세로 가운데 정렬
    - flex-end : 자식 노드가 부모 노드의 아래 변로 정렬
    - flex-start : 자식 노드가 부모 노드의 윗 변으로 정렬 
    (stretch와 다르게 자식노드가 고정크기가 없더라도 부모 노드의 높이만큼 늘리지 않음)

[레이아웃] --> 구성 요소들을 효과적으로 배열하는 작업
- 일반적인 기본 레이아웃 -
1. header : 로고, 메인메뉴, 검색
2. 본문 : 홈페이지 본문 
3. 푸터 : 회사정보, 네비(홈페이지의 링크 모음)
- 레이아웃 시작 전 CSS 전 작업 - 
1. 첫 단계에서는 각 구역의 위치가 안 보이기 때문에 css에 border를 눈에 보이도록 지정해주기
    (작업 종료 후 삭제하기)
2. margin과 padding을 0으로 초기화해주기 (여백을 직접 지정하기 위해)
3. box-sizing으로 모델 크기의 기준 설정해주기
    - content-box(기본값) : 테두리 전(컨텐츠) 기준으로 width와 height 사이즈 지정
    - border-box : 테두리까지(컨텐츠 + 테두리 + padding) 기준으로 width와 height 사이즈 지정

4. 페이지 전체 사이즈 지정 : 보통 PC 기준 width 1100~1300px
--> 보통 페이지는 컨텐츠가 계속해서 추가 되기 때문에 height를 지정하지 않음
5. margin: 0 auto; : 컨텐츠 중앙 정렬

★ 보통 id는 레이아웃 큰 틀(header, main, footer)에서만 사용 --> 단일 적용만 가능하기 때문