[JS] 
- 웹 서버 (node.js)
- 앱 서버 (REACT.JS NATIVE)
- 소프트웨어 (NW.JS)
node.js가 생긴 후 js로 풀스택이 가능해짐
★ JS 내 입력된 데이터는 휘발성
★ JS는 문자/숫자/불리언/객체를 다룸


★ 리터럴 : 각 프로그래밍 언어의 자료형을 분류한 원시 데이터 / 값 (나눌 수 없는 기본값)
    ex. 1(문자 리터럴) 안녕/hello(문자 리터럴) true/false(불리언 리터럴)
    ex . let num ="10" 
    --> 필요한 메모리 수 : 2개 -> 10이라는 데이터(리터럴)메모리 / num변수 메모리
    ex . let num1 = "10"
         let num2 = "10"
     --> 필요한 메모리 수 : 3개 -> 10이라는 데이터(리터럴)메모리 / num1변수 메모리 / num2 변수 메모리


★ 컴퓨터 번역 규칙
1. 아스키코드(영문 지원)
2. 유니코드(한글지원) --> HTML <head> 부분에 UTF-8이 유니코드 사용 선언

[JS 적용 방법]
1. <body>
        <Script>
            JS 코드 작성
        </Script>
   </body>
2. JS파일을 따로 생성하여 HTML 에서 임포트(불러오기)
    -> <Script src="JS파일 경로"></Script>로 적용

[JS 출력 확인]
브라우저 -> f12(개발자 도구) -> console 에서 확인

[주석]
1. /*  */ : 여러 줄 주석
2. // : 한줄 주석


★ 상수 (const 키워드 사용)
★ 변수 : 데이터를 저장할 수 있는 메모리 공간의 이름 (let 키워드 사용)
    - 값 저장
    - 값 재사용
    - 메모리 공간에 상징적으로 의미를 부여하는 식별자
    - 리터럴 값에 의미 부여
        -> 중복 값 배제(같은 값을 사용할 때 컴퓨터가 서로 다른 값으로 인식하게 하기 위해서)
    ☆ 변수는 무조건 1개의 데이터만 저장 가능 ☆
        ex . let 변수 = [a, b, c]; 의 경우 변수가 저장한 데이터는 배열 1개 뿐
                            배열 =/= 배열 원소의 값
    - 변수의 유효범위
        1) 전역변수 : 특정한 {  }안에서 선언되지 않은 변수
            -> 유효범위 : 프로그램 시작 ~ 프로그램 종료
        2) 지역변수 : 특정한 {  }안에서 선언한 변수 / 블록 안에서만 메모리 할당 후 종료시 메모리 반환
            -> 유효범위 : 블록 시작 ~ 블록 종료
        3) 매개변수 : 함수 호출 시 인자값을 저장하는 변수
        ★ 매개변수는 지역변수로 해당 함수 내에서만 존재 가능



[JS 데이터 타입]
1. string(문자열) : ' 문자열 ' / " 문자열 " / ` 문자열 `(백틱)
2. number(숫자) : 10진수
3. bool(불린) : true / false
-> 하나의 데이터 타입 저장 
4. [ ] : 배열(JS는 여러 자료형을 동시에 배열에 저장 가능)
5. ( )  : 함수
-> 여러 개를 저장

★ undefined : 값이 없다.

★ string타입을 숫자타입으로 변환하는 방법
1. "문자" * 1 => 숫자타입
2. 변환 함수 사용
    - Number() : String을 숫자로 변환해줌 -> ex. Number("10");

★ 숫자타입을 string타입으로 변환
1. 연결 연산자 사용
    - 숫자+' ' => 문자타입
2. 변환 함수 사용
    - String() : 숫자를 string타입으로 변환해줌 -> ex . String(10);

- 변환이 필요한 이유 font-end <--> 통신(HTTP) <--> back-end
- 다형성 : 다양한 형태를 가지는 성질 -> 데이터 타입이 변환되는 것


[JS배열]
1. 변수 : let 변수명 = [원소나열];
2. 상수 : const 상수명 = [원소나열];
배열 =/= 배열 원소의 값
★ 마지막 인덱스를 구하는 법 
    형식 : 배열변수.length -1
★ 배열 순회 : 배열 내 모든 원소를 하나씩 호출 
    형식 :  for (let index = 0; index <= 배열명.length -1; index++){
               배열명[index];
            };


[함수]
컴퓨터의 이벤트 :프로그램에 의해 감지 / 처리될 수 있는 동작 / 사건
컴퓨터의 동작 : 함수 / 행위 / 메소드
함수(function) : 미리 코드를 저장해놓을 수 있는 공간 / JS는 자동형변환 -> 반환자료형 X
    ex . 라면 자동 조리기 
        변수 = 물 / 면 / 스프
        함수 = 물이 나오는 행위 / 면,스프을 넣는 행위 / 온도를 체크하는 행위 / 먹는 행위  
★ 매개변수(=인자값) : 함수 호출 시 인자값을 변수에 대입하는 변수
★ 반환값 : 결과값 / 나오는 값

1. 종류
    1) 만들어져 있는 함수(=라이브러리)  ex. console.log() / document.wirte() / push() / splice()
    2) 개발자가 정의한 함수

2. 함수 표현
    1) 선언적 함수 : 선언 키워드를 이용하여 정의한 함수 
        호출 ex. function함수명( ){  };
        - 다회성 함수에 주로 사용
    2) 익명 함수 : 함수명 없이 정의한 함수 
        호출 ex . let 변수 = function( ){  };
        - 일회성 함수에 주로 사용
    3) 화살표(람다식) 함수 : 선언 키워드와 함수명 없이 화살표로 이루어진 함수 
        호출 ex . let 변수 = (  ) => {  };

3. 함수 선언
    1) function (let, const와 동일하게 함수를 만들기 위한 함수 선언 키워드)        
    2) 함수명 정의 (함수 식별 용도로 정의)
        - 키워드, 숫자시작, 일반특수 문자, 띄어쓰기 --> 불가 
        - 일반적으로 카멜 표기법 사용 ex . mycar -> myCar / studentscorelist -> studentscorelist
        - 관례적 : front-end -> my-car / back-end(DB) -> my_car
    3) 매개변수 정의 (함수실행 시 함수 안로 들어오는 값 / 인자값을 변수에 대입)
    4) {    } (함수실행 시 처리될 명령어들의 구역)
    5) return (반환값)
        - 함수를 실행하고 함수가 호출했던 곳으로 반환되는 값
    => 형식 
        function 함수명(매개변수List){
            함수가 처리할 명령어
            
            return;
            };
        - 매개변수 X  / 반환값 X
        - 매개변수 X  / 반환값 O    
        - 매개변수 O  / 반환값 X  ex. console.log() / document.write()
        - 매개변수 O  / 반환값 O  ex. prompt() 

4. 함수 호출 : 호출 -> 인자값이 각 매개변수에 대입 -> 함수 실행 -> 함수의 return값 반환 
    => 형식
        함수명(인자값); 

4. 함수 사용 이유
    - 코드의 재사용
    - 변수의 유효범위를 지정할 수 있기 때문에 메모리를 효율적으로 사용할 수 있다.
    - 미리 정의된 코드의 인자값(=매개변수)에 따라 서로 다른 결과값(반환값)을 얻을 수 있다.
        -> 결과값(반환값)은 한 개만 얻을 수 있다.


[JS연산자]
1. 산술 연산자 : +(가) / -(감) / *(승) / /(나머지) / %(나머지)
2. 연결 연산자 : +(연결) -> 값에 문자가 포함되어있을 경우 형변환을 통해 문자열로 값 반환
3. 비교 연산자 : >(초과) / <(미만) / >=(이상) / <=(이하) / ==(같다.) / !=(같지않다.) 
                / ===(값,타입이 같다.) / !==(값, 타입이 같지 않다.)
                => 반환값 : 논리값(True / False)
4. 관계 연산자 : &&(논리곱) / ||(논리합) / !(부정)
                => 반환값 : 논리값(True / False)
5. 대입 연산자 : =
6. 복합 대입 연산자 : += / -= / *= / /= / %= 
7. 증감 연산자 : ++변수; / --변수; -> 전위증감연산자 (출력 전 값 증가(변수 값 == 수식 값))
                변수++; / 변수--; -> 후위증감연산자 (출력 후 값 증가(변수 값 =/= 수식 값))
8. 삼항 연산자(피연산자 = 3개) 
    - 조건문 ? true일 때 반환 값 : false일 때 반환 값;
    - 조건문1 ? true일 때 반환 값 : 조건문2 true일 때 반환 값 : false일 때 반환 값;
                -> 삼항 중첩 연산자
9. 비트 연산자




[조건문]
- 조건문의 결과 값 --> True / False 
- 삼항 연산자 -> 간단한 조건문/리액트 에서 사용
1. if 문 : 조건으로 True / False , 비교연산 , 관계연산 지정
    - 형식 1 : if( 조건 ) true일 때 반환 값;
    - 형식 2 : if( 조건 ){ true 값; true 값; };
    - 형식 3 : if( 조건 ){ true 값;}
                    else{ false 값; };
    - 형식 4 : if( 조건 1 ){ true 값; }
                    else if( 조건 2 ){ true 값; };
                    else if( 조건 3 ){ true 값; };
                    else{ false 값; ;}
    - if문 중첩 형식 : if( 조건 ){
                            if( 조건 ){   }
                            else{   };
                        } else{  };
        
[반복문]
- 조건이 true일 때 반복문 내 코드 반복 / 조건이 false일 때 반복문 종료
- 반복(=중복)되는 코드와 반복되지 않은 코드를 찾아 반복될 경우만 
- 반복되는 코드가 존재하는 경우 반복되는 코드와 반복되지 않는 코드의 패턴 파악
1. for 문
    for(초기화 ; 조건문 ; 증감식){
        반복할 실행 문자;
    };
2. for 문 if 문 중첩
    - continue  (키워드)
    for(초기화 ; 조건문 ; 증감식){
        if( 조건문 ){continue};     // 조건 충족 시 가장 가까운 for문의 증감식으로 이동
    };
    - break     (키워드)
    for(초기화 ; 조건문 ; 증감식){
        if( 조건문 ){break};       // 조건 충족 시 가장 가까운 코드 종료
    };
    - 무한 루프(=출력 / 입력)
    for( ; ; ){
        출력 / 입력 문장;
    }
★ for 문 중첩 가능 -> 상위 for문이 1회 반복할 때마다 하위 for문은 전체 반복한다.
★ for문의 실행순서 : 초기화 -> 조건문 -> 반복할 실행 문자 -> 증감식 
                    -> 조건문 -> 반복할 실행 문자 -> 증감문자 ->    
                        => 조건이 true 일 때 계속 반복
                        => 조건이 false 면 for 문 종료
★ 반복문과 배열
- 배열의 인덱스는 순차적인 순서가 있다.   -> 0 ~ 마지막 인데스 까지 1씩 증가


[JS]
1. 입력 함수 
    - confirm() : 브라우저에 알림 메세지 창
        -> 확인 = true / 취소 = false
    
    - prompt() : 브라우저 입력 메세지 (값을 무조건 string타입으로 받고 반환함)
    
    - document()
        - .querySelector('').innerHTML : HTML 마크업을 DOM객체 호출
        => 매개변수 : 선택자 / 반환값 : 지정한 DOM객체
            ex . document.querySelector(".클래스명"); => 지정된 클래스의 DOM객체를 반환
            ex . document.querySelector("#아이디명"); => 지정된 마크업의 DOM객체를 반환
            ex . document.querySelector("마크업명"); => 지정된 아이디의 DOM객체를 반환
            ex . document.querySelector(".클래스명 > "); -> >로 지정한 선택자도 사용가능
        
        ★ D(Document)O(Object)M(Model)객체 : HTML 마크업을 객체처럼 사용할 수 있는 모델
            - .value : 해당 마크업의 value 속성값 호출 / 대입
                => value를 갖는 마크업 : <input/> / <select></select> / <textarea>
            - .innerHTML : 해당 마크업 사이에 있는 HTML을 호출 / 대입 (<마크업>inner</마크업>)
                => <input/> / <img/> 등 마크업을 시작과 종료를 동시에 하는 마크업에는 사용 불가

    - .write(초기화로 HTML코드를 작성해놓은 변수명) : 변수명에 초기화해놓은 HTML 코드가 
                                                    HTML에 코드를 작성한 것과 똑같이
                                                    페이지에 생성됨( HTML과 JS 결합 )
    
    

2. 출력 함수
    - console.log() : 개발자도구 console 탭에 출력 
        -> 데이터 확인/유지 보수/테스트를 위해 주로 사용(배포 시 삭제하고 배포)
    - alert() : 브라우저 알람창에 출력
    - document.write() : 현재 js의 내용을 브라우저에 출력
    - document.마크업.innerHTML() : 특정 마크업의 속성/필드/멤버변수 출력

3. 배열 원소 추가 함수
    - 변수명.push('추가할 원소');  -> 마지막 인덱스에 추가됨

4. 배열 원소 삭제 함수
    - 변수명.splice(삭제를 시작할 인덱스 위치 번호, 삭제할 인덱스 개수);
    - 변수명.splice(삭제를 시작할 인덱스 위치 번호, 삭제할 인덱스 개수 , 새로운 원소 삽입);
    
5. 배열 원소 탐색 함수
    - 변수명.indexOf('탐색 원소');
    --> 출력 함수와 같이 사용가능 : console.log(변수명.indexOf.('탐색 원소')) 
            -> 배열 내 탐색 원소가 존재할 시 해당 원소의 인덱스 번호 출력
            -> 배열 내 탐색 원소가 존재하지 않을 경우 -1 출력
6. 타입 변환 함수 
    - Number(); : 숫자타입으로 변환하는 함수
        -> 매개 변수 : 변환할 데이터 / 반환값 : 변환된 숫자 데이터
    - parseInt(); : 소수점을 버리고 정수로 반환하는 함수
        -> 매개 변수 : 변환할 데이터 / 반환값 : 변환된 정수 데이터
    - String(); : 문자열 타입으로 변환하는 함수
        -> 매개 변수 : 변환할 데이터 / 반환값 : 변환된 문자열 데이터

7. 날짜 / 시간 함수
    - nowDate(변수) = new Date() : 현재 시스템(컴퓨터)의 날짜 / 시간을 반환하는 객체 생성
    - Date객체 함수    
        - nowDate.getFullYear() : 현재 날짜의 연도 반환
        - nowDate.getMonth() : 현재 날짜의 월 반환(0:1월 11:12월로 반환) -> +1을 해서 사용
        - nowDate.getDate() : 현재 날짜의 일 반환
        - nowDate.getHours() : 현재 시간 반환
        - nowDate.getMinutes() : 현재 분 반환
        - nowDate.getSeconds() : 현재 초 반환
        ★ 월과 일이 한자리수 -> 한자리수로 반환 
            => 한자리수일 경우 두자리수로 맞춰서 사용 ex . 2월 -> 1(0부터 1월이기 때문) -> 01
            => nowDate.getMonth() + 1 > 10 ? "0"+(nowDate.getMonth()+1) : nowDate.getMonth()+1;

8. 배열 원소 분해 함수

[객체]
1. document객체(=DOM객체) 

★[템플릿]
1. 백틱(` `) 템플릿 : `문자${js코드}문자`  --> 문자 변수값 문자로 출력됨
                     `문자${js코드 + js코드}문자` 와 같이 변수 연산도 가능함
    - 변수를 삽입할 수 있게 해줌
    - 연산 / 함수호출 도 가능
    - 선언 / 초기화는 불가함
    - 백틱 템플릿 사용 X 시 : '문자' + js코드 + '문자'와 같이 + 연산자를 사용해야함

[이스케이프 / 제어문자]
1. \n : 줄바꿈
2. \t : 공백
3. \" : 큰 따옴표 한 개 출력
4. \' : 작은 따옴표 한 개 출력
5. \\ : 백 슬래시 한 개 출력
-> JAVA/ 파이썬 / C 모두 동일


    