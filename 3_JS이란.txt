[JS] 
- 웹 서버 (node.js)
- 앱 서버 (REACT.JS NATIVE)
- 소프트웨어 (NW.JS)
node.js가 생긴 후 js로 풀스택이 가능해짐

★ JS는 문자/숫자/불리언/객체를 다룸


★ 리터럴 : 각 프로그래밍 언어의 자료형을 분류한 원시 데이터 / 값 (나눌 수 없는 기본값)
    ex. 1(문자 리터럴) 안녕/hello(문자 리터럴) true/false(불리언 리터럴)

★ 컴퓨터 번역 규칙
1. 아스키코드(영문 지원)
2. 유니코드(한글지원) --> HTML <head> 부분에 UTF-8이 유니코드 사용 선언

[JS 적용 방법]
1. <body>
        <Script>
            JS 코드 작성
        </Script>
   </body>
2. JS파일을 따로 생성하여 HTML 에서 임포트(불러오기)
    -> <Script src="JS파일 경로"></Script>로 적용

[JS 출력 확인]
브라우저 -> f12(개발자 도구) -> console 에서 확인

[주석]
1. /*  */ : 여러 줄 주석
2. // : 한줄 주석


★ 변수 : 데이터를 저장할 수 있는 메모리 공간의 이름 (let 키워드 사용)
    - 값 저장
    - 값 재사용
    - 리터럴 값에 의미 부여
        -> 중복 값 배제(같은 값을 사용할 때 컴퓨터가 서로 다른 값으로 인식하게 하기 위해서)
    ☆ 변수는 무조건 1개의 데이터만 저장 가능 ☆
        ex . let 변수 = [a, b, c]; 의 경우 변수가 저장한 데이터는 배열 1개 뿐
                            배열 =/= 배열 원소의 값
★ 상수 (const 키워드 사용)

ex . let num ="10" 
    --> 필요한 메모리 수 : 2개 -> 10이라는 데이터(리터럴)메모리 / num변수 메모리
ex . let num1 = "10"
     let num2 = "10"
     --> 필요한 메모리 수 : 3개 -> 10이라는 데이터(리터럴)메모리 / num1변수 메모리 / num2 변수 메모리


[JS 자료형]
1. string(문자열) : ' 문자열 ' / " 문자열 " / ` 문자열 `(백틱)
2. number(숫자) : 10진수
3. bool(불린) : true / false 
4. undefined : 값이 없다.

★ string타입을 숫자타입으로 변환하는 방법
1. "문자" * 1 => 숫자타입
2. 변환 함수 사용
    - Number() : String을 숫자로 변환해줌 -> ex. Number("10");

★ 숫자타입을 string타입으로 변환
1. 연결 연산자 사용
    - 숫자+' ' => 문자타입
2. 변환 함수 사용
    - String() : 숫자를 string타입으로 변환해줌 -> ex . String(10);

- 변환이 필요한 이유 font-end <--> 통신(HTTP) <--> back-end
- 다형성 : 다양한 형태를 가지는 성질 -> 데이터 타입이 변환되는 것


[JS연산자]
1. 산술 연산자 : +(가) / -(감) / *(승) / /(나머지) / %(나머지)
2. 연결 연산자 : +(연결) -> 값에 문자가 포함되어있을 경우 형변환을 통해 문자열로 값 반환
3. 비교 연산자 : >(초과) / <(미만) / >=(이상) / <=(이하) / ==(같다.) / !=(같지않다.) 
                / ===(값,타입이 같다.) / !==(값, 타입이 같지 않다.)
                => 반환값 : 논리값(True / False)
4. 관계 연산자 : &&(논리곱) / ||(논리합) / !(부정)
                => 반환값 : 논리값(True / False)
5. 대입 연산자 : =
6. 복합 대입 연산자 : += / -= / *= / /= / %= 
7. 증감 연산자 : ++변수; / --변수; -> 전위증감연산자 (출력 전 값 증가(변수 값 == 수식 값))
                변수++; / 변수--; -> 후위증감연산자 (출력 후 값 증가(변수 값 =/= 수식 값))
8. 삼항 연산자(피연산자 = 3개) 
    - 조건문 ? true일 때 반환 값 : false일 때 반환 값;
    - 조건문1 ? true일 때 반환 값 : 조건문2 true일 때 반환 값 : false일 때 반환 값;
                -> 삼항 중첩 연산자
9. 비트 연산자
 

[함수]
- 매개변수 : 인자값/ 들어가는 값
- 반환값 : 결과값 / 나오는 값


[조건문]
- 조건문의 결과 값 --> True / False 
- 삼항 연산자 -> 간단한 조건문/리액트 에서 사용
1. if 문 : 조건으로 True / False , 비교연산 , 관계연산 지정
    - 형식 1 : if( 조건 ) true일 때 반환 값;
    - 형식 2 : if( 조건 ){ true 값; true 값; };
    - 형식 3 : if( 조건 ){ true 값;}
                    else{ false 값; };
    - 형식 4 : if( 조건 1 ){ true 값; }
                    else if( 조건 2 ){ true 값; };
                    else if( 조건 3 ){ true 값; };
                    else{ false 값; ;}
    - if 중첩 형식 : if( 조건 ){
                            if( 조건 ){   }
                            else{   };
                        } else{  };
        

[JS배열]
1. 변수 : let 변수명 = [원소나열];
2. 상수 : const 상수명 = [원소나열];
배열 =/= 배열 원소의 값


[JS]
1. 입력 함수 
    - confirm() : 브라우저에 알림 메세지 창
        -> 확인 = true / 취소 = false
    - prompt() : 브라우저 입력 메세지 (값을 무조건 string타입으로 받고 반환함)
    - document()
        - .querySelector('마크업').innerHTML : 해당 마크업의 HTML을 가져옴
        - .write(초기화로 HTML코드를 작성해놓은 변수명) : 변수명에 초기화해놓은 HTML 코드가 
                                                       HTML에 코드를 작성한 것과 똑같이
                                                       페이지에 생성됨( HTML과 JS 결합 )

2. 출력 함수
    - console.log() : 개발자도구 console 탭에 출력 
        -> 데이터 확인/유지 보수/테스트를 위해 주로 사용(배포 시 삭제하고 배포)
    - alert() : 브라우저 알람창에 출력
    - document.write() : 현재 js의 내용을 브라우저에 출력
    - document.마크업.innerHTML() : 특정 마크업의 속성/필드/멤버변수 출력

3. 배열 원소 추가 함수
    - 변수명.push('추가할 원소');  -> 마지막 인덱스에 추가됨

4. 배열 원소 삭제 함수
    - 변수명.splice(삭제를 시작할 인덱스 위치 번호, 삭제할 인덱스 개수);
    - 변수명.splice(삭제를 시작할 인덱스 위치 번호, 삭제할 인덱스 개수 , 새로운 원소 삽입);
    
5. 배열 원소 탐색 함수
    - 변수명.indexOf('탐색 원소');
    --> 출력 함수와 같이 사용가능 : console.log(변수명.indexOf.('탐색 원소')) 
            -> 배열 내 탐색 원소가 존재할 시 해당 원소의 인덱스 번호 출력
            -> 배열 내 탐색 원소가 존재하지 않을 경우 -1 출력
6. 타입 변환 함수 
    - Number(); : 숫자타입으로 변환하는 함수
        -> 매개 변수 : 변환할 데이터 / 반환값 : 변환된 숫자 데이터
    - parseInt(); : 소수점을 버리고 정수로 반환하는 함수
        -> 매개 변수 : 변환할 데이터 / 반환값 : 변환된 정수 데이터
    - String(); : 문자열 타입으로 변환하는 함수
        -> 매개 변수 : 변환할 데이터 / 반환값 : 변환된 문자열 데이터
        

[이스케이프 / 제어문자]
1. \n : 줄바꿈
2. \t : 공백
3. \" : 큰 따옴표 한 개 출력
4. \' : 작은 따옴표 한 개 출력
5. \\ : 백 슬래시 한 개 출력
-> JAVA/ 파이썬 / C 모두 동일

★[템플릿]
1. 백틱(` `) 템플릿 : `문자${js코드}문자`  --> 문자 변수값 문자로 출력됨
                     `문자${js코드 + js코드}문자` 와 같이 변수 연산도 가능함
    - 변수를 삽입할 수 있게 해줌
    - 연산 / 함수호출 도 가능
    - 선언 / 초기화는 불가함
    - 백틱 템플릿 사용 X 시 : '문자' + js코드 + '문자'와 같이 + 연산자를 사용해야함

    