절차 지향  vs 객체 지향

주체(Subject) vs 객체 (Object)
-> 주체 : 주관을 가진 개체 / 주가 되는 부분
-> 객체 : 주체가 아닌 다른 실체(타인)
    
    - 생활 속의 객체 예시 
        - 안경 / 의자 / 컴퓨터 / CPU / 강의실 / 강의 / 공기 / 손,발 / 종이 등
            => 물리적 / 추상적인 모든 것들이 객체에 포함
    ★ 나 자신은 나의 기준에서 주체 / 타인 기준에서 객체

    - 컴퓨터 속의 객체
        - 고유한 속성 / 행동을 가짐
        - 물리적 / 논리적(추상적)으로 존재하는 대상들
        - 세상의 모든 것들의 성질과 행동을 디지털화 가능 (= 코딩으로 생성 가능)
        
★ 객체 지향 프로그래밍 : 객체를 중심으로 하는 프로그래밍 패러다임
    -> 주체(개발자 / 실체 / 나) <-----> 객체(컴퓨터 / 실체)
    주체(개발자)가 컴퓨터에서 실체물을 생성 --> 객체생성(만들어진 모든 것)
    - 객체지향 프로그래밍언어 : JS , JAVA , PYTHON , C# 등

[객체]
객체 : 속성과 함수를 가질 수 있는 자료의 구조 / 타입
    - 형식 : .(접근연산자)를 이용해 속성의 값과 함수 호출
    - 개발자 지정 객체
    - 라이브러리 : 미리 데이터 / 함수를 제공함으로써 빠른 개발 가능    
        ex .  console. / document.  / new.Date() 
            => console.log()의 경우 console. -> 객체 log() -> 함수
            => document.wirte()의 경우 document. -> 객체 write() -> 함수

[DOM객체]
DOM 객체 (= document 객체) : 현재 JS가 위치한 HTML의 객체 => HTML을 조작(수정/반환 등)하기 위해
    - JS에서 미리 만들어진 HTML 관련 객체 제공 => JS에서 HTML을 조작하기 위해
    - DOM 트리
        HTML 
            -> head
                -> title / style 등
            -> body
                -> table / span / div 등
    1. document.write('출력할 내용') : HTML에 출력할 내용을 출력하는 함수
    2. document.querySelector('선택자') : HTML에 지정된 선택자 하나를 객체로 반환하는 함수
                                                => 객체로 반환
    3. document.querySelectorAll('선택자') : HTML에 지정한 선택자의 모든 마크업을 객체로 반환하는 함수
                                                => 배열로 반환
    -> 선택자 => CSS와 동일

        - 마크업(요소) 객체 주요 속성 / 함수 -> 마크업의 모든 속성 사용 가능
        1. .value : 지정된 마크업의 value 속성값 호출 / 대입
            - 사용가능요소 : <input/><select/><textarea/> 등
            - 사용불가능요소 : <div> <table> <span> 등
            - 호출 형식 : document.querySelector('선택자').value;
            - 대입 형식 : document.querySelector('선택자').value = 새로운 값;
            => 문자열로 반환 / 객체 X

        2. .innerHTML : 지정된 마크업의 시작 <-inner-> 끝 / inner부분에 HTML 호출 / 대입
            - 사용가능요소 : <div> <table> <span> 등 inner가 존재하는 마크업
            - 사용불가능요소 : inner가 존재하지 않는 마크업
            - 호출 형식 : document.querySelector('선택자').innerHTML;
            - 대입 형식 : document.querySelector('선택자').innerHTML = 새로운 값;
             => 문자열로 반환 / 객체 X

        3. .style : 지정된 마크업의 style 속성을 이용해 CSS 조작
            - 모든 마크업이 사용 가능
            - 호출 형식 : document.querySelector('선택자').style;
            - 대입 형식 : document.querySelector('선택자').style = 'CSS문법';

        4. .src : 지정된 마크업의 src 속성값 호출 / 대입
            - 사용가능요소 : <img audio src"/> <audio src =""/> 등 src를 속성으로 가진 마크업


    




[JS 객체] 
1. class 기반의 객체(class-object)
2. class가 없는 객체(class-free-object)
=> JS는 clss(설계도) 유뮤에 상관없이 객체 생성이 가능

[JS의 객체 형태]
형태 : { 속성명 : 값, 속성명 : 값, 속성명 : 값 };
- {}(중괄호)를 하나의 객체로 취급 / 각 속성은 ,(쉼표)로 구분
- 속성명, 속성값이 한쌍으로 구성됨

★ 속성명 : 변수명과 같이 식별 역할을 함
    => 데이터 / 값 / 함수 / 배열 / 객체 모두 대입 가능
★ 속성 : 객체가 갖는 고유한 성질(데이터 / 값)


[객체 선언 형식]
let / const = { };
=> 객체를 갖는 변수명을 통해 호출한다.

[변수 <-> 객체 <-> 객체속성의 관계]
    - {   }: 데이터의 타입으로 구성된 데이터 1개 = 객체 1개
    - let 변수 = {  }; : 변수가 데이터(객체) 1개를 참조함
    - let 변수 = {속성명 : 데이터} : 변수가 데이터(객체) 1개를 참조
                                    -> 데이터(객체)가 각 속성들을 참조
                                    변수 =참조=> 객체 =참조=> 속성
    - 객체가 속성을 참조하는 방법 
        - .(온점) -> 접근 연산자 (객체 내 속성에 접근 / 호출 시 사용) 
        - 형식 : 객체.속성명; == 변수명.속성명;
        ex . console.log -> console이라는 객체가 log를 참조한다.

[객체 속성을 다루는 방법]
1. 객체 내 특정 속성값 호출 => 변수명.속성명;
2. 객체 내 속성값 생성 => 변수명.새로운속성명 = 새로운데이터;
3. 객체 내 속성값 수정 => 변수명.기존속성명 = 새로운데이터;
4. 객체 내 속성값 삭제 => delete 변수명.속성명;

★ 객체 내 속성은 모든 데이터 타입을 가질 수 있다.
        let 변수명{
            속성명 : 리터럴 (문자 / 숫자 / 불리언 등),
            속성명 : [  ] (배열),
            속성명 : function(){    } (함수),
            속성명 : {  } (객체)
        }; => 모두 가능



[세션 / 쿠키]
- 브라우저(HTML , css , js 렌더링 / HTTP 통신 제공 )
    기능 1. 세션 : 사용자가 웹 페이지를 방문하고 있는 동안 메모리를 저장하는 공간
                    -> 휘발성 : 방문 종료 시 삭제 / 브라우저 종료 => 메모리 삭제
                    ex . 검색엔진 , 임시데이터에 사용
                - 객체(라이브러리) : sessionStorage
    기능 2. 쿠키 : 사용자가 웹 페이지 방문을 종료해도 메모리 저장
                    -> 비휘발성 : 브라우저 종료 => 메모리 유지
                    ex . 자동로그인 기능 구현에 사용
                - 객체(라이브러리) : localStorage

    => 세션과 쿠키는 쉽게 접근 가능하기 때문에 보안에 취약 / 보안이 필요한 정보는 JAVA에 저장
    => 세션과 쿠키는 키와 값을 쌍으로 가짐
    => 세션 / 쿠키는 무조건 문자열로 구성된 자료 -> 문자만 저장가능(배열 / 객체 / 함수 저장 불가)
        ★ 해결법 : 형변환(=다형성)
            - 형변환 라이브러리
                1) JSON(JavaScript Object Notaion) 객체 : 자바스크립트 객체 문버의 형식
                    - JSON.stringify( {속성명 : 값} ): 객체 ---> 문자열
                    - JSON.parse(" {속성명 : 값} ") : 문자열 ---> 객체 
                2) XML
                3) CSV

[세션과 쿠키 함수(라이브러리)]
1. .setItem( 'key', 'value' ) : 세션 / 쿠키 값 저장
2. .getItem('key') : 세션 / 쿠키 값 호출 => 키를 통해 값 호출