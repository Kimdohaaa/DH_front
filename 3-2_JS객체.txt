절차 지향  vs 객체 지향

주체(Subject) vs 객체 (Object)
-> 주체 : 주관을 가진 개체 / 주가 되는 부분
-> 객체 : 주체가 아닌 다른 실체(타인)
    
    - 생활 속의 객체 예시 
        - 안경 / 의자 / 컴퓨터 / CPU / 강의실 / 강의 / 공기 / 손,발 / 종이 등
            => 물리적 / 추상적인 모든 것들이 객체에 포함
    ★ 나 자신은 나의 기준에서 주체 / 타인 기준에서 객체

    - 컴퓨터 속의 객체
        - 고유한 속성 / 행동을 가짐
        - 물리적 / 논리적(추상적)으로 존재하는 대상들
        - 세상의 모든 것들의 성질과 행동을 디지털화 가능 (= 코딩으로 생성 가능)
        
★ 객체 지향 프로그래밍 : 객체를 중심으로 하는 프로그래밍 패러다임
    -> 주체(개발자 / 실체 / 나) <-----> 객체(컴퓨터 / 실체)
    주체(개발자)가 컴퓨터에서 실체물을 생성 --> 객체생성(만들어진 모든 것)
    - 객체지향 프로그래밍언어 : JS , JAVA , PYTHON , C# 등

[JS 객체] 
1. class 기반의 객체(class-object)
2. class가 없는 객체(class-free-object)
=> JS는 clss(설계도) 유뮤에 상관없이 객체 생성이 가능

[JS의 객체 형태]
형태 : { 속성명 : 값, 속성명 : 값, 속성명 : 값 };
- {}(중괄호)를 하나의 객체로 취급 / 각 속성은 ,(쉼표)로 구분
- 속성명, 속성값이 한쌍으로 구성됨

★ 속성명 : 변수명과 같이 식별 역할을 함
    => 데이터 / 값 / 함수 / 배열 / 객체 모두 대입 가능
★ 속성 : 객체가 갖는 고유한 성질(데이터 / 값)


[객체 선언 형식]
let / const = { };
=> 객체를 갖는 변수명을 통해 호출한다.

[변수 <-> 객체 <-> 객체속성의 관계]
    - {   }: 데이터의 타입으로 구성된 데이터 1개 = 객체 1개
    - let 변수 = {  }; : 변수가 데이터(객체) 1개를 참조함
    - let 변수 = {속성명 : 데이터} : 변수가 데이터(객체) 1개를 참조
                                    -> 데이터(객체)가 각 속성들을 참조
                                    변수 =참조=> 객체 =참조=> 속성
    - 객체가 속성을 참조하는 방법 
        - .(온점) -> 접근 연산자 (객체 내 속성에 접근 / 호출 시 사용) 
        - 형식 : 객체.속성명; == 변수명.속성명;
        ex . console.log -> console이라는 객체가 log를 참조한다.

[객체 속성을 다루는 방법]
1. 객체 내 특정 속성값 호출 => 변수명.속성명;
2. 객체 내 속성값 생성 => 변수명.새로운속성명 = 새로운데이터;
3. 객체 내 속성값 수정 => 변수명.기존속성명 = 새로운데이터;
4. 객체 내 속성값 삭제 => delete 변수명.속성명;

★ 객체 내 속성은 모든 데이터 타입을 가질 수 있다.
        let 변수명{
            속성명 : 리터럴 (문자 / 숫자 / 불리언 등),
            속성명 : [  ] (배열),
            속성명 : function(){    } (함수),
            속성명 : {  } (객체)
        }; => 모두 가능