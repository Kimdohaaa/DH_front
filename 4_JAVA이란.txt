[컴파일]
컴퓨터가 이해할 수 있는 언어로 번역하는 행위

[컴파일러]
컴퓨터가 이해할 수 있는 언어로 번역하는 프로그램

[JAVA의 장점]
1. (JVM : 자바 가상 머신) 운영체제(플랫폼)로 부터 독립적이다.
    -> 코드(.class)를 한번 작성하면 여러 운영체제에서 실행 가능
2. 객체지향 언어이다. 
    -> 유지보수가 쉬움 / 확장성 우수
3. 안정적이다. 
    -> 가비지 컬렉터(GC)가 메모리를 자동(동적)으로 관리
4. 오픈소스(미리 만들어진 소스)
    -> JDK / SPRING /JSP 등 다양한 오픈소스 제공

[JAVA의 사용처]
1. 웹
2. 앱
3. 게임



[진수]
2진수 / 8진수 / 10진수 / 16진수

[단위]
비트 -> 바이트 -> 킬로바이트 -> 메가바이트 -> 기가바이트 -> 테라바이트
- 1비트 : 명령어의 최소단위
- 1바이트(8비트) : 운영체제 용량의 최소 단위
- 1킬로바이트(1024바이트)

[아스키코드]
이용한 영문자 / 숫자 / 특수문자를 7비트로 정의해놓은 규칙 -> 한글지원 X (유니코드는 한글 지원)
=> 2(비트)의 7승으로 128 표현가능 -> 가장 앞 비트는 부호비트

[컴퓨터의 부호 있는 수 표현]
1. 부호화 - 크기
2. 1의 보수
3. 2의 보수


[변수]
- 변하는 수
- 값을 넣을 수 있는 공간
1. 변수의 형태
    자료형 변수명 = 리터럴;
2. 변수의 선언
    - 선언 : 자료형 변수명;
    - 초기화 : 자료형 변수명 = 리터럴;
3. 변수 선언 제약사항
    - 숫자로 시작 X
    - 특수 문자는  _(언더바) / $(달러) 만 사용 가능
    - 키워드 사용불가

[기본 자료형] -> 메모리를 효율적으로 할당하기 위해 사용할 값에 맞는 자료형 사용
1. 논리형 자료형
    - boolean
        - 1 byte
        - true / false 만 표현 가능
2. 문자형 자료형
    - char -> 한글자
        - 1 byte
        - 유니코드
        - ''(작은 따옴표) 사용
    - String -> 문자열 
        - N byte -> 입력 문자 크기에 따라 상이
        - 문자열 클래스 / 객체
        - "" (큰 따옴표) 사용
3. 정수형 자료형
    - byte
        - 1 byte
        - +-128 까지 표현 가능
    - short
        - 2 byte
        - +-3만 까지 표현가능
    - int 
        - 4 byte
        - +- 21억 까지 표현가능
        ★ 리터럴 정수(= 정수의 기본타입 ) -> 키보드로 입력하는 모든 값은 int형이다.
    - long
        - 8 byte
        - +- 21억 이상 까지 표현 가능
        ★ 정수의 기본타입은 int 형이기 때문에 long자료형 
           사용 시 값 뒤에 L을 붙여 사용
4. 실수(=부동소수점)형 자료형
    - float
        - 4 byte
        - 소수점 8자리 까지 표현 가능
        ★ 실수의 기본타입은 double 형이기 때문에 float자료형 
           사용 시 값 뒤에 F을 붙여 사용
    - double
        - 8 byte
        - 소수점 17자리 까지 표현 가능
        ★ 리터럴 실수(= 실수의 기본 타입)

[부동소수점]
1. float 
    - 부호비트 : 1비트 
    - 지수부 : 8비트 사용 
    - 가수부 : 23비트 사용
2. double
    - 부호비트 : 1비트 
    - 지수부 : 11비트 사용 
    - 가수부 : 52비트 사용
ex . 1000000
        -> 지수부(숫자의 크기) : 10의 6승
        -> 가수부(숫자의 유효 자릿수) : 1
        => 1.0 * 10의 6승

-> 0과 1 사이의 실수는 끝없는 무한대 표현이 가능 
    => 컴퓨터의 한계(표현 한계가 넘어가 무한대에 빠지기 때문)
-> 한계 발생으로 인해 실제 연산이 중요한 부분의 업무에서는 실수타입 사용 x 
    => 라이브러리 또는 문자열 처리를 통해 실수 계산

    

나머지는 이클립스에서~~~