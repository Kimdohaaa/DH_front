버전(과거)관리 서비스

[특징]
1. 소프트웨어 개발에서 소스코드를 효과적으로 관리
2. 개발 프로젝트 내 폴더 작업을 기록하고 버전(버전) 관리, 추적
3. 여러 사람들과 동일한 프로젝트(저장소-리포지토리)를 병렬 작업
        --> 코드 공유, 코드 취합 가능

[용어]
1. Repository : 저장소 --> 프로젝트 파일, 폴더를 저장하는 저장소
2. Commit : 파일의 추가, 변경 내용을 저장소(로컬=현재PC)에 저장하는 작업
3. Push : 파일의 추가, 변경 된 내용을 원격 저장소(Github)에 업로드

[VScode와 Github 연동 방법]
1. Github 회원가입
2. Github를 PC 에 설치
3. VScode 메뉴 -> 소스제어 -> Github에 게시 -> Github로그인
   -> pulic 또는 privite 선택 --> 업로드할 파일 
4. VScode 메뉴 -> 소스제어 -> 메세지 입력 칸 -> 업로드명 입력후 커밋 및 
-> Github 프로필 -> Your Repository

★ Repository를 만드는 사람/계정 과 파일을 Commit/Push하는 이름/이메일이 별도로 존재
[해당 오류 발생시 해결 방법]
VScode상단 메뉴 -> 터미널 -> 새 터미널 -> +아이콘 옆에 화살표 -> Gitbash 클릭
-> 터미널에 git config --global user.name Githubid 입력
        -> 터미널에 git config --global user.name 입력(gitusername확인용)해서
         입력한 이름 뜨는지 확인
-> 터미널에 git config --global user.email Gitemail 입력 
        -> 터미널에 git config --global user.email 입력 해서
         입력한 이메일 뜨는지 확인

[ GIT PAGE ] 간단한 페이지(HTML/CSS/JS) 배포 , 포트폴리오(프론트엔드 개발자)
    - git 에서 코드 저장소(리포지토리)의 코드를 호스팅 할수 있는 기능 
    1. 호스팅할 저장소의  메인페이지 파일명을 'index.html' 
    2. 본인 github 홈페이지 접속 
    3. [ new ] 또는 [ new repository ]
    4. Create a new repository
        - Repository name : (임의로 아무거나) tolist
        - Public
            [ create repository ]
    5. 빈 리포지토리에 화면 가운데 'uploading an existing file' 클릭 
    6. 'index.html' 파일을 드래그 해서 업로드 , css/js 와 또 다른 html 포함 가능
        -> index.html 파일은 리포지토리에 최상위 경로에 있어여한다.
        [ commit change ]
    6. 리포지토리 상단 메뉴에 [ settings ] 클릭 
    7. 왼쪽 사이드 메뉴에 [Pages] 클릭 
    8. [Branch] 항목에서 
        [None] ---> [main]으로 변경후 [/root] [save]클릭 
    9. 1~2분 기다리기 : 새로고침F5 -> Your site is live at https://xxxxx.github.io/xxxx


[ 로컬저장소(내PC) , 원격저장소(gitHub server) ]
- https://github.com/itdanjalog/tj2024b_front ( 원격 저장소 ) : 깃허브 회사의 서버실에 코드 저장
- clone(복제) : 원격 저장소로 부터 로컬 저장소로 가져오는 행위 
- commit(완료) : 로컬 저장소로 부터 코드를 저장 행위 
- push : 로컬 저장소로 부터 완료(commit)된 코드들을 원격으로 올리기/업로드 행위
    - commit and push
- PULL : 원격 저장소로 부터 상태를 다운로드 행위 

--- 현재 강의에서의 gitHub 구조 
    1. git회사PC 
        원격저장소 : https://github.com/itdanjalog/tj2024b_front
    2. 학원의 내PC
        로컬저장소 : tj2024b_front
    3. 집/노트북 내PC
        로컬저장소 : kim/tj2024b_front


[ 버전 관리 ] VCS 
    12/12 13:02
        [원격] https://github.com/itdanjalog/tj2024b_front  1.0
        [학원로컬] tj2024b_front 1.0
    12/12 20:02
        저장소 복제 
        [집로컬] kim/tj2024b_front 1.0
    12/12 22:00
        [집로컬] kim/tj2024b_front ---> 1.1 PUSH [원격]1.1
    12/13 9:30
        학원도착 , 만일 집에서 PUSH한적 있거나 저장소의 상태(버전) 변화가 있으면 
        [학원로컬] pull --> 1.1
    12/13 18:20
        [학원로컬] tj2024b_front ----> 1.2 PUSH [원격]1.2
    12/13 20:00
        [집도착] pull --> 1.2
    12/13 22:00
        [집로컬] kim/tj2024b_front ---> 1.3 push [원격]1.3
    12/14 9:30
        학원도착 , pull



[ 브랜치 / 분기 ]
    1. 정의 : 프로젝트를 하나의 저장소에서 각 브랜치마다 서로 다른 저장 상태/버전 관리 할 수 있도록 지원하는 기능 
    2. 목적 : 1. 프로젝트 버전관리( 배포용, 테스트용 등등) 2.협업간의 각 사람들마다 코드 구분/분류
        - 기본값 브랜치 는 master/main
        - master/main 브랜치를 한사람이 사용하면 문제 없지만. 여러사람이 동일한 브랜치로 동일한 저장소 사용하면 관리 힘들다.


[ 브랜치 생성 / 운영 ] - vscode 
    [ 1. 브랜치 생성 ] 
        방법1. 소스제어 ---> ··· ---> 분기 ---> 새분기 만들기 
        방법2. 오른쪽 하단에 main(브랜치명) 클릭
        2. 브랜치명 아무거나(영문 권장) 입력후 엔터 
        * 브랜치생성은 로컬에 생성되었기 때문에 원격저장소에 적용하기위해 push
        3. 브랜치생성후 최초1번은 push( 또는 브랜치 게시 ) 해야한다.
    
    [ 2. 로컬에서 브랜치 변경 ] * 체크아웃 
        방법1 : 소스제어 ---> ··· ---> 다음으로 체크아웃 
        방법2 : 오른쪽 하단에 main(현재브랜치) 클릭
        * 주의할점 브랜치 변경시 현재 상태를 commit/push 완료후 에 하는걸 권장 

    [ 3. 다른 브랜치의 상태 가져오기 ] * pull 
        -> 방법1. 소스제어 ---> ··· ---> 분기 ---> 병합
        * 같은 파일내 코드이면 병합(충돌)메시지 , 병합 에디터 실행 
        - 두 브랜치간의 코드들을 확인하면서 결과 코드로 병합하기 


[ 브랜치 실습 ]
    [초대하는사람입장]
    1. 프로젝트 생성
    2. 원격저장소에 프로젝트를 게시
    3. 웹 저장소 상단메뉴 [settings ] 클릭
    4. 정 왼쪽메뉴 -> [Collaborators] 클릭 -> [ add people ] 클릭
    5. 팀원 git 이름 또는 이메일로 검색해서 초대장 , 강사 : kgs2072@naver.com

    [초대받은사람입장]
    1.초대를 보내왔는지 확인 [ 1.git과 연동된 이메일 홈페지에서 메일로 확인 2.git홈페이지에서 로고 왼쪽 아이콘 클릭 ]
    2.각 초대를 확인 [ ACCEPT ]


[과제]
- 한 사람이 프로젝트 생서 -> index.html 생성 -> 원격저장소 게시
- 원격 저장소에 다른 사람 초대
- 모든 조원들은 각 브랜치 생성
- index.html에 조원1(애국가 1절) 조원2(애국가 2절) 조원3(애국가 3절) 자성
- 각 코드 작성후 각 Push원격저장소 만든 사람이 main 브랜치로 이동하여 조원의 모든 브랜치 상태 병합
- main 브랜치를 최신화 했으면 push (브랜치 병합 1개당 push 1번 권장)
- 본인 브랜치로 돌아감
- 각 조원들은 main 브랜치 병합